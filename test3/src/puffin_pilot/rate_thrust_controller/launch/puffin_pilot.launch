
<launch>
  <!-- Pace notes -->
  <!-- Keeps track on which gate to pass next, used by puffin_pilot -->
  <node name="puffin_pace_notes" pkg="puffin_pace_notes" type="puffin_pace_notes" respawn="false" clear_params="true" output="screen">
  </node>
  
  <!-- IR Marker odometry -->
  <node name="puffin_ir_marker_odometry" pkg="puffin_ir_marker_odometry" type="puffin_ir_marker_odometry" respawn="false" clear_params="true" output="screen">
  </node>

  <!-- Odometry -->
  <!-- Fuses IMU + IR Marker odometry -->
  <node name="puffin_state_estimation" pkg="puffin_ir_marker_odometry" type="puffin_ir_marker_odometry" respawn="false" clear_params="true" output="screen">
  </node>

  <!-- Trajectory generation -->
  <node name="puffin_pilot" pkg="puffin_pilot" type="puffin_pilot" respawn="false" clear_params="true" output="screen">
    <!-- Input -->
    <remap from="odometry" to="/puffin_state_estimation/predicted_odometry" />
    <remap from="roll_pitch_yawrate_thrust" to="/puffin_pilot/roll_pitch_yawrate_thrust" />

    <!-- Output (mav_msgs/RateThrust) -->
    <remap from="rate_thrust" to="/uav/input/rateThrust" />

    <!-- Params -->
    <rosparam file="$(find puffin_pilot)/config/PID_attitude_puffin.yaml"/>
  </node>

  <!-- Control Angle+Thrust -->
  <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="false" clear_params="true" output="screen">
    <!-- Input -->
    <remap from="odometry" to="/puffin_state_estimation/predicted_odometry" />

    <!-- Output (mav_msgs/RollPitchYawrateThrust) -->
    <remap from="command/roll_pitch_yawrate_thrust" to="/puffin_pilot/roll_pitch_yawrate_thrust"/>
    
    <!-- Params -->
    <rosparam file="$(find puffin_pilot)/config/nonlinear_mpc_puffin.yaml"/>    
    <rosparam file="$(find puffin_pilot)/config/disturbance_observer_puffin.yaml"/>
    <param name="use_rc_teleop" value="false"/>
    <param name="verbose" value="true" />
    <param name="reference_frame" value="puffin_nest"/>
  </node>

</launch>

<!--
<include file="$(find package_name)/directory/another.launch"/>



<launch>
  <arg name="mav_name" default="firefly" />
  <arg name="namespace" default="$(arg mav_name)"/>
  <group ns="$(arg namespace)">
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="true" />
      <param name="reference_frame" value="world"/>
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
  </group>
</launch>
-->
